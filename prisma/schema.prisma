generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------
  address String @unique
  apiKey  String @unique @default(uuid())
}

model Plug {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------
  target String
  value  BigInt
  data   String

  // ---------------------------------------------------------------------------
  // Many-to-one
  // ---------------------------------------------------------------------------
  plugs   Plugs?  @relation(fields: [plugsId], references: [id])
  plugsId String?

  // ---------------------------------------------------------------------------
  // Relations
  // ---------------------------------------------------------------------------
  @@index([plugsId])
}

model Plugs {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------
  socket String
  solver String
  salt   String

  // ---------------------------------------------------------------------------
  // One-to-many
  // ---------------------------------------------------------------------------
  plugs     Plug[]
  livePlugs LivePlugs[]
}

model LivePlugs {
  // ---------------------------------------------------------------------------
  // Core
  // ---------------------------------------------------------------------------
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ---------------------------------------------------------------------------
  // Fields
  // ---------------------------------------------------------------------------
  chainId   Int
  signer    String
  signature String

  // ---------------------------------------------------------------------------
  // Many-to-one
  // ---------------------------------------------------------------------------
  plugs   Plugs  @relation(fields: [plugsId], references: [id])
  plugsId String

  // ---------------------------------------------------------------------------
  // Relations
  // ---------------------------------------------------------------------------
  @@index([plugsId])
}
